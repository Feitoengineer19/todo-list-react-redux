{"version":3,"sources":["Components/TodoItem.js","App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["ListItem","props","itemList","todos","map","item","className","key","style","paddingRight","fontWeight","type","value","text","id","onChange","e","editTodo","target","onClick","deleteTodo","icon","enterAnimation","leaveAnimation","library","add","faTrash","App","this","currentItem","handleInput","addTodo","today","Date","getFullYear","getMonth","getDate","onSubmit","placeholder","TodoItem","React","Component","connect","state","dispatch","now","inputTodo","initialStateTodos","Boolean","window","location","hostname","match","store","createStore","prevState","action","preventDefault","newTodo","newTodos","filteredTodos","filter","todo","updatedTodos","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0aa41ddb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItem(props) {\r\n  const todos = props.todos;\r\n\r\n  const itemList = todos.map((item) => (\r\n    <div className='list__item' key={item.key}>\r\n      <span style={{ paddingRight: '10px', fontWeight: 'bold' }}>＊</span>\r\n      <input\r\n        className='list__input'\r\n        type='text'\r\n        value={item.text}\r\n        id={item.key}\r\n        onChange={e => props.editTodo(e.target.value, item.key)}\r\n      />\r\n      <span\r\n        className='list__delItemBtn'\r\n        onClick={() => props.deleteTodo(item.key)}\r\n      >\r\n        <FontAwesomeIcon icon='trash' />\r\n      </span>\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <FlipMove enterAnimation='fade' leaveAnimation='fade'>\r\n      {itemList}\r\n    </FlipMove>\r\n  );\r\n}\r\n\r\nexport default ListItem;\r\n","// React ----------------------------------------\nimport React from 'react';\nimport { connect } from 'react-redux' \n\n// Conponents & Actions ----------------------------------------\nimport TodoItem from './Components/TodoItem';\nimport { inputTodo, addTodo, deleteTodo, editTodo } from './actions'\n\n// Style & Others ----------------------------------------\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport './App.scss';\n\nlibrary.add(faTrash)\n\n// Grab the state as props from the Redux stroe\nconst mapStateToProps = state => ({\n  todos: state.todos,\n  currentItem: state.currentItem\n})\n\n// Grab the dipatch as props from the Redux stroe\nconst mapDispatchToProps = dispatch => ({\n  handleInput: e => dispatch(inputTodo(e.target.value)),\n  addTodo: e => dispatch(addTodo(e)),\n  deleteTodo: key => dispatch(deleteTodo(key)),\n  editTodo: (text, key) => dispatch(editTodo(text, key))\n})\n\nclass App extends React.Component {\n  render() {\n    const { todos, currentItem } = this.props\n    const { handleInput, addTodo, deleteTodo, editTodo } = this.props\n    const today = new Date()\n    \n    return (\n      <div className='todoList'>\n        <h1>Todo List</h1>\n        <h5>{ `${today.getFullYear()} 年 ${today.getMonth() + 1} 月 ${today.getDate()} 日`}</h5>\n        <p>Get things done, and enjoy the life!</p>\n        <header>\n          <form className=\"header__form\" onSubmit={addTodo}>\n            <input\n              className=\"header__input\"\n              type='text'\n              placeholder='WHAT TO DO?'\n              value={currentItem.text}\n              onChange={handleInput}\n            />\n            <button \n              className=\"header__btn\"\n              type='submit'\n            >\n              Add\n            </button>\n          </form>\n        </header>\n        <div className=\"list\">\n          <TodoItem \n            todos={todos} \n            deleteTodo={deleteTodo}\n            editTodo={editTodo}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps, \n  mapDispatchToProps\n)(App);\n","import { \r\n  INPUT_TODO,\r\n  ADD_TODO,\r\n  DELETE_TODO,\r\n  EDIT_TODO\r\n} from './constants'\r\n\r\nexport const inputTodo = (text, key=Date.now()) => ({\r\n  type: INPUT_TODO,\r\n  text,\r\n  key\r\n})\r\n\r\nexport const addTodo = (e) => ({\r\n  type: ADD_TODO,\r\n  e\r\n})\r\n\r\nexport const deleteTodo = key => ({\r\n  type: DELETE_TODO,\r\n  key\r\n})\r\n\r\nexport const editTodo = (text, key) => ({\r\n  type: EDIT_TODO,\r\n  text,\r\n  key\r\n})","export const INPUT_TODO = 'INPUT_TODO'\r\nexport const ADD_TODO = 'ADD_TODO'\r\nexport const DELETE_TODO = 'DELETE_TODO'\r\nexport const EDIT_TODO = 'EDIT_TODO'","import { \r\n  INPUT_TODO,\r\n  ADD_TODO,\r\n  DELETE_TODO,\r\n  EDIT_TODO\r\n} from './constants'\r\n\r\nconst initialStateTodos = {\r\n  todos: [{\r\n    text: '學習如何用 React 實現 SPA',\r\n    key: '2343289405235',\r\n  },{\r\n    text: '學習如何用 Redux 管理 State',\r\n    key: '452352352624',\r\n  }],\r\n  currentItem: {\r\n    text: '',\r\n    key: '',\r\n  },\r\n}\r\n\r\nexport const todoApp = (prevState=initialStateTodos, action={}) => {\r\n  switch(action.type) {\r\n    case INPUT_TODO:\r\n      return ({ \r\n        ...prevState, \r\n        currentItem: {\r\n        text: action.text,\r\n        key: action.key\r\n      },\r\n    })\r\n\r\n    case ADD_TODO:\r\n      action.e.preventDefault()\r\n      const newTodo = prevState.currentItem\r\n      if(newTodo.text) {\r\n        const newTodos = [...prevState.todos, newTodo];\r\n        return ({\r\n          ...prevState, \r\n          todos: newTodos,\r\n          currentItem: {\r\n            text: '',\r\n            key: '',\r\n          },\r\n        })\r\n      }\r\n      break\r\n\r\n    case DELETE_TODO:\r\n      const filteredTodos = prevState.todos.filter(todo => todo.key !== action.key)\r\n      return ({\r\n        ...prevState, \r\n        todos: filteredTodos\r\n      })\r\n      \r\n    case EDIT_TODO:\r\n      let updatedTodos = prevState.todos.map(todo => {\r\n        todo.text = todo.key === action.key ? action.text : todo.text\r\n        return todo\r\n      })\r\n      return ({\r\n        ...prevState, \r\n        todos: updatedTodos\r\n      })\r\n\r\n    default:\r\n      return prevState\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// React ----------------------------------------\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux';\n\n// Conponents & Reducers ----------------------------------------\nimport App from './App';\nimport { todoApp } from './reducers'\n\n// Style & Others ----------------------------------------\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(todoApp)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}